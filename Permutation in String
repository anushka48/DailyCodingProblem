#Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise. In other words, return true if one of s1's permutations is the substring of s2.

class Solution(object):
    def checkInclusion(self, s1, s2):
        """
        :type s1: str
        :type s2: str
        :rtype: bool
        """
        #2 tasks:
        #Check if substring
        #Check if permutation

        #as soon as a viable letter comes up, make s2 dict of length of s1
        #compare dict for both
        #if they match, return True

        s1_dict = Counter(s1)
        
        for i in range(len(s2)):
            if (s2[i] in s1_dict) and i+len(s1) <= len(s2):
                p1 = i
                p2 = i+len(s1)
                s2_dict = Counter(s2[p1:p2])
                if (s1_dict == s2_dict):
                    return True
                
        return False

