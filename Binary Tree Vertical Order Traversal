# Given the root of a binary tree, calculate the vertical order traversal of the binary tree.

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
from collections import defaultdict 

class Solution:
    def verticalTraversal(self, root: Optional[TreeNode]) -> List[List[int]]:
        ctr = 0
        coords = defaultdict(list)
        coords[0].append(root.val)
        def traverseTree(node, ctr):
            if (node == None):
                return
            if (node.left):
                coords[ctr - 1].append(node.left.val)
                traverseTree(node.left, ctr-1)
            if (node.right):
                coords[ctr + 1].append(node.right.val)
                traverseTree(node.right, ctr+1)               
        traverseTree(root,ctr)
        coords = sorted(coords.items(), key = lambda x:x[0])
        ret = []
        for e in coords:
            ret.append(e[1])
        return(ret)
# Same solution, just redid for confidence
class Solution:
    """
    @param root: the root of tree
    @return: the vertical order traversal
    """
    def vertical_order(self, root: TreeNode) -> List[List[int]]:
        # write your code here
        coord = defaultdict(list) # -2:[3], -1:[1], 0:[0,5,6],1:[2], 2:[4]
        def traverse(root, ctr):
            if (root == None): 
                return
            print("ctr", ctr, root.val)
            coord[ctr].append(root.val)
            print("here", coord[ctr])
            if (root.left):
                traverse(root.left, ctr-1)
            if (root.right):
                traverse(root.right, ctr+1)
        traverse(root, 0)
        coord = sorted(coord.items()) #by default, sorts by key
        ret = []
        for c in coord:
            ret.append(c[1])
        return ret
