# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

#You are given the heads of two sorted linked lists list1 and list2.

#Merge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists.

#Return the head of the merged linked list.

class Solution:
    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:
        newL = None
        tail = None
        while (list1 and list2):
            if (list1.val < list2.val):
                newN = ListNode(val = list1.val)
                if (not newL):
                    newL = newN
                else:
                    tail.next = newN
                list1 = list1.next
                tail = newN
            else:
                newN = ListNode(val = list2.val)
                if (not newL):
                    newL = newN
                else:
                    tail.next = newN
                list2 = list2.next
                tail = newN

        if (list1):
            if (tail):
                tail.next = list1
            else:
                return list1
        elif (list2):
            if (tail):
                tail.next = list2
            else:
                return list2
        return newL
        
