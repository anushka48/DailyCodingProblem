   #    You are given an array prices where prices[i] is the price of a given stock on the ith day.

# You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

# Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

 
class Solution(object):
    def maxProfit(self, prices):
        """
        :type prices: List[int]
        :rtype: int
        """
        # SOLUTION 1
        # while(p1 < len(prices) and p2 < len(prices)):
        #     diff = prices[p2]-prices[p1]
        #     print(diff)
        #     if (diff > 0):
        #         if (diff > maxProf):
        #             maxProf = diff
        #             print(maxProf)
        #         p2+=1                
        #     else:
        #         p1 = p2
        #         p2 = p1+1
        # return maxProf   
        # SOLUTION 2
        minEl = prices[0]
        maxProf = 0
        for i in range(len(prices)):
            if prices[i] < minEl:
                minEl = prices[i]
            maxProf = max(prices[i] - minEl, maxProf)
        return maxProf
   # SOLUTION 3
   def maxProfit(self, prices: List[int]) -> int:
        prof = 0
        r_max = 0
        for i in range(len(prices)-1, -1, -1):
            if (prices[i] > r_max):
                r_max = prices[i]
            prof = max(r_max - prices[i], prof)
        return prof

            
        
