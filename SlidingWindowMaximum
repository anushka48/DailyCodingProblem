#You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right. 
#You can only see the k numbers in the window. Each time the sliding window moves right by one position.

#Return the max sliding window.

class Solution(object):
    def maxSlidingWindow(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: List[int]
        """
        #for each window, if max still within window, then compare max with new element
        #else, compute new max
        left = 0
        right = k-1
        maxes = list()
        currMaxIdx = 0
        currMax = nums[0]
        
        #base - first window
        for i in range(0, k):
            if nums[i] > currMax:
                currMax = nums[i]
                currMaxIdx = i
        maxes.append(currMax) 
        
        for i in range(1, len(nums)-k+1):
            #establish winsow [i, i+k]
            #if currMaxIdx in window, don't change, else do
            if currMaxIdx > i and currMaxIdx < i+k:
                if (nums[i+k-1] > currMax):
                    currMax = nums[i+k-1]
                    
            #if not in window, recalculate
            else:
                currMax = nums[i]
                for i in range(i, i+k):
                    if nums[i] > currMax:
                        currMax = nums[i]
                        currMaxIdx = i
            maxes.append(currMax)
            
        return maxes

#Optimiz: Using a deque, for each current number, hold on to numbers that are greater than current number and delete any numbers that 
#are out of the window from the left. The first/leftmost number still in the queue will be appended to out since itâ€™s a local max.
