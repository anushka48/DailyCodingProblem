"""
# Definition for a Node.
class Node:
    def __init__(self, val = 0, neighbors = None):
        self.val = val
        self.neighbors = neighbors if neighbors is not None else []
"""
#Given a reference of a node in a connected undirected graph.

#Return a deep copy (clone) of the graph.

from typing import Optional
import queue
class Solution:
    def cloneGraph(self, node: Optional['Node']) -> Optional['Node']:
        q = queue.Queue() #1
        q.put(node)
        first = True #T
        root = node #1
        allNodes = dict() #{}
        neighbors = dict()
        while (not q.empty()):
            old = q.get()
            if (not old):
                return old
            for n in old.neighbors:
                getVal = allNodes.get(n.val)
                if not getVal:
                    new = Node(n.val)
                    neighbors[n.val] = n.neighbors
                    allNodes[n.val] = new 
                    q.put(n)
            new = Node(old.val)
            allNodes[old.val] = new
            neighbors[old.val] = old.neighbors

        for key in allNodes.keys():
            getVal = neighbors.get(key)
            newN = []
            for i in range(len(getVal)):
                newN.append(allNodes.get(getVal[i].val))
            allNodes[key].neighbors = newN
        return allNodes.get(node.val)
                
