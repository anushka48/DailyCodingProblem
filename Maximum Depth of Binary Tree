# Given the root of a binary tree, return its maximum depth.

# A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution(object):
    lenList = []
    def maxDepth(self, root, ctr = 0):
        """
        :type root: TreeNode
        :rtype: int
        """
        self.lenList = []
        self.traversal(root, ctr)
        if (len(self.lenList) > 0):
            return max(self.lenList)
        else:
            return 0

    def traversal(self, root, ctr):
        if (root == None):
            return
        ctr+=1
        if (root.left):
            self.traversal(root.left, ctr)
        if (root.right):
            self.traversal(root.right, ctr)
        if (root.left == None and root.right == None):
            self.lenList.append(ctr)
        
