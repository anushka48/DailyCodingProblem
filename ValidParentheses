"""
Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
"""

class Solution(object):
    def isValid(self, s):
        """
        :type s: str
        :rtype: bool
        ex) { 5 [4 () 7] 
        ex) {         
        { [ (
        """
        #iterate through string char by char
            #if a ({[ is reached, push onto stack
            #if "]})" is reached, check if stack contains matching opp, pop
        
        #if stack not exmpty, then parentheses invalid; else valid
        characters = {'(':')', '{':'}', '[':']'}
        stack = Stack()
        for letter in s:
            if letter in characters.keys():
                stack.push(letter)
            elif (letter in characters.values()) and (not(stack.is_empty())):
                ind_of_letter = characters.values().index(letter)
                stack.print_stack()
                if (stack.pop() == characters.keys()[ind_of_letter]):
                    continue
                else: 
                    return False
                
        if (stack.is_empty()):
            return True
        else:
            return False
     
class Stack:
    def __init__(self):
        self.stack = []
        self.size = 0
    def push(self, val):
        self.stack.append(val)
        self.size+=1
    def pop(self):
        val = self.stack[self.size-1]
        self.stack.remove(self.stack[self.size-1])
        self.size-=1
        return val
    def print_stack(self):
        for i in range(len(self.stack) - 1, -1, -1):
            print(self.stack[i])
    def is_empty(self):
        return (self.size == 0)
                
                
