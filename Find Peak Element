#A peak element is an element that is strictly greater than its neighbors.

#Given a 0-indexed integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.

#You may imagine that nums[-1] = nums[n] = -∞. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.

#You must write an algorithm that runs in O(log n) time.
class Solution:
    # [1,2,3, 1]
    def findPeakElement(self, nums: List[int]) -> int:
        start = 0 # 0
        end = len(nums)-1 # 1
        if (end == 0):
            return 0
        while start <= end: ##
            mid = (start + end) // 2 #1
            if (mid == 0 and nums[mid + 1] < nums[mid]):
                return mid
            elif (mid == len(nums) - 1 and nums[mid - 1] < nums[mid]):
                return mid
            elif (nums[mid-1] < nums[mid] > nums[mid+1]):
                print(nums[mid-1] , nums[mid] , nums[mid+1])
                return mid
            elif (nums[mid] < nums[mid+1]):
                start = mid + 1
            elif (nums[mid-1] > nums[mid]):
                end = mid - 1

            
                    
