# Given a node from a cyclic linked list which is sorted in ascending order, write a function to insert a value into the list such that it remains a cyclic sorted list.
# 3 cases
# empty list
# inflection point
# normal insertion

#  1 ---> 2
#  |      |
#  *4<--- 3

#  1 ---> *2
#  |      |
#  4 <--- 3h

# empty
class Node():
    def __init__(self, value: int):
        self.val = value
        self.next = None

def insertNode(node: Node, head: Node) -> Node:
    if (head == None):
        node.next = node
        return node

    infPoint = None
    # upon insertion, break
    cur = head
    ctr = 0
    while (cur):
        if (cur == head and ctr > 0):
            # insertion at inflection
            node.next = infPoint.next
            infPoint.next = node
            break
        if (cur.val <= node.val <= cur.next.val):
            node.next = cur.next
            cur.next = node
            break
        elif (cur.val > cur.next.val):
            infPoint = cur #4
        ctr += 1 #2
        cur = cur.next
    return head

n1 = Node(1)
n2 = Node(2)
n3 = Node(3)
n4 = Node(4)
n1.next = n2
n2.next = n3
n3.next = n1
# print(insertNode(n4, n3).next.val)
