
class LRUCache(object):
    def __init__(self, capacity):
        """
        :type capacity: int
        """
        self.cache_dict = dict()
        self.cache_q = list()
        self.capacity = capacity

    def get(self, key):
        """
        :type key: int
        :rtype: int
        """
        
        if (key not in self.cache_dict):
            return -1
        else:
            if (key in self.cache_q):
                self.cache_q.remove(key)
            self.cache_q.append(key)
            return self.cache_dict[key]
    

    def put(self, key, value):
        """
        :type key: int
        :type value: int
        :rtype: None
        """
        if (key in self.cache_dict.keys()):
            self.cache_dict[key] = value
            if (key in self.cache_q):
                self.cache_q.remove(key)
            self.cache_q.append(key)
        else:
            if (len(self.cache_dict) == self.capacity):
                #smth in queue but not in dict
                self.cache_dict.pop(self.cache_q.pop(0))
            self.cache_dict[key] = value
            self.cache_q.append(key)
        

# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)
