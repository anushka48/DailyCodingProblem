class Solution(object):
    def isValid(self, s):
        """
        :type s: str
        :rtype: bool
        ex) { 5 [4 () 7] 
        ex) {         
        { [ (
        """
        #iterate through string char by char
            #if a ({[ is reached, push onto stack
            #if "]})" is reached, check if stack contains matching opp, pop
        
        #if stack not exmpty, then parentheses invalid; else valid
        characters = {')':'(', '}':'{', ']':'['}
        stack = Stack()
        for letter in s:
            if letter in characters.values():
              #if it's an opening brace
                stack.push(letter)
                print("printing now: ")
                stack.print_stack()
            elif (letter in characters.keys()):
              #if it's an closing brace
                if not stack.is_empty():
                    if (stack.peek() == characters[letter]):
                        stack.pop()
                    else:
                      #the top of stack does not match current closing brace
                        return False
                else:
                  #stack is
                    return False
        if stack.is_empty():
            return True
        
        
class Stack:
    def __init__(self):
        self.stack = []
        self.size = 0
    def push(self, val):
        self.stack.append(val)
        self.size+=1
    def pop(self):
        val = self.stack[-1]
        del self.stack[-1]
        self.size-=1
        return val
    def peek(self):
        val = self.stack[self.size-1]
        return val
    def print_stack(self):
        for i in range(len(self.stack) - 1, -1, -1):
            print(self.stack[i])
    def is_empty(self):
        return (self.size == 0)

solution = Solution()
print(solution.isValid("[([]])"))
                
