import math
# print((math.log2(5) == )

def powers(numbers):
    past = []
    ctr = 0
    for n in numbers:
        past.append(n)
        for p in past:
            if (p + n <= 0):
                continue
            print(p+n)
            if math.log2(p + n) == int(math.log2(p+n)):
                ctr+=1
    return ctr
powers([-2, -1, 0, 1, 2])

import math
from collections import defaultdict
def powers(numbers):
    past = defaultdict()
    ctr = True
    max_num = math.pow(2, math.ceil(math.log(2*max(numbers))))
    print(max_num)
    for n in numbers:
        past[n] = True
        cur = max_num
        first = True
        while cur != 1 and first:
            if (cur == 1):
                first = False
            if past.get(max_num - n):
                ctr+=1
            cur/=2
        
    return ctr
print("ctr:", powers([1, -1,2, 3]))
# print(math.ceil((math.log2(6))))
print(8>>2)
