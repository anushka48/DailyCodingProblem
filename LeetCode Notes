### Ordered Dict:
# import
from collections import OrderedDict
d = OrderedDict()
# pops item from end in LIFO fashion if last is True, from begin in FIFO fashion of last is False
popped = d.popitem(last = True | False)
# moves item with key to the end if last = True; begin if last = False
d.move_to_end(key, last = True | False)

### defaultdict
# import
from collections import defaultdict
d = defaultdict()
# to set:
d['x'] = 'y'
# to get make SURE to use get function in case it's not in dict
d.get('z')
# AND make sure to compare return to None in if statement; in case key does exist and return is 0. Ex:
if (d.get('z') == None) and not if (d.get('z')) # in case (key, val) = ('z',0)

### sort vs sorted
# sorted is NOT in-place, works for iterables like list, dict, and set
l_sorted = sorted(l, key = lambda <fxn>, reverse = True | False)
# <fxn> could be: x : (x[0], x[1]), len, other built-in functions...

# sort IS in-place from list class, only works on lists
l.sort(reverse = True | False, key = lambda x: <fxn>)
