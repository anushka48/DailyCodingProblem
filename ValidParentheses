class Solution(object):
    def isValid(self, s):
        """
        :type s: str
        :rtype: bool
        ex) { 5 [4 () 7] 
        ex) {         
        { [ (
        """
        #iterate through string char by char
            #if a ({[ is reached, push onto stack
            #if "]})" is reached, check if stack contains matching opp, pop
        
        #if stack not exmpty, then parentheses invalid; else valid
        characters = {')':'(', '}':'{', ']':'['}
        stack = list()
        for letter in s:
            if letter in characters.values():
              #if it's an opening brace
                stack.append(letter)
            elif (letter in characters.keys()):
              #if it's an closing brace
                if not len(stack) == 0:
                    if (stack.pop() == characters[letter]):
                        continue
                    else:
                      #the top of stack does not match current closing brace
                        return False
                else:
                  #stack is empty but closing brace found
                    return False
                    
        if len(stack) == 0:
          #ensuring opening braces were clsoed
          return True
        else:
          return False
        

                
