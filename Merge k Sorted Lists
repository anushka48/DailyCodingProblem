import heapq
# You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.

# Definition for singly-linked list.
# class ListNode:
    # def __init__(self, val=0, next=None):
    #     self.val = val
    #     self.next = next
    # def __lt__(self, other):
    #     return self.val < other.val
    
class Solution:
    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:
        h = []
        ctr = 0
        root = None
        for l in lists:
            current = l
            while current != None:
                ctr+=1
                heappush(h, (current.val, ctr, current))
                current = current.next
        
        if (len(h) == 1):
            return heappop(h)[2]
        first = True
        
        while(len(h) > 0):
            if (first):
                root = heappop(h)[2]
                current = root
                first = False
            current.next = heappop(h)[2]
            current = current.next
        return root


        
