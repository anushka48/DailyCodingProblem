#Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.

#Implement the LRUCache class:

#LRUCache(int capacity) Initialize the LRU cache with positive size capacity.
#int get(int key) Return the value of the key if the key exists, otherwise return -1.
#void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.
#The functions get and put must each run in O(1) average time complexity.

###

from collections import OrderedDict

class LRUCache(object):
    def __init__(self, capacity):
        """
        :type capacity: int
        """
        self.cache_dict = OrderedDict()
        self.capacity = capacity

    def get(self, key):
        """
        :type key: int
        :rtype: int
        """
        if (key not in self.cache_dict):
            return -1
        else:
            if (key in self.cache_dict):
                value = self.cache_dict.pop(key)
                self.cache_dict[key] = value
            return self.cache_dict[key]
    

    def put(self, key, value):
        """
        :type key: int
        :type value: int
        :rtype: None
        """
        if (key in self.cache_dict):
            self.cache_dict[key] = value
            if (key in self.cache_dict):
                value = self.cache_dict.pop(key)
                self.cache_dict[key] = value
        else:
            if (len(self.cache_dict) == self.capacity):
                #smth in queue but not in dict
                self.cache_dict.popitem(last = False)
            self.cache_dict[key] = value
        

# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)
