# Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].

# The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

# You must write an algorithm that runs in O(n) time and without using the division operation
class Solution(object):
    def productExceptSelf(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        #prefix = mult up to & incl that index
        # prefix = [-1,-1,0,0,0]
        #postfix = mult from that idx to end
        # postfix =[0, 0, 0,-9,3]
        # answer = [0,0,9,0,0]
        
        prefix = [1]*len(nums)
        prefix[0] = nums[0]
        for i in range(1,len(nums)):
            prefix[i] = nums[i]*prefix[i-1]

        postfix = [1]*len(nums)
        postfix[len(nums)-1] = nums[len(nums)-1]
        for i in range(len(nums)-2, 0,-1):
            postfix[i] = nums[i]*postfix[i+1]
        
        nums[0] = postfix[1]
        nums[len(nums)-1] = prefix[len(nums)-2]
        for i in range(1,len(nums)-1):
            nums[i] = prefix[i-1] * postfix[i+1]
        return nums
