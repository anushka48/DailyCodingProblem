"""
A company is planning to interview 2n people. Given the array costs where costs[i] = [aCosti, bCosti], the cost of flying the ith person to city a is aCosti, and the cost of flying the ith person to city b is bCosti.

Return the minimum cost to fly every person to a city such that exactly n people arrive in each city.
"""

class Solution(object):

    def compare(self, costs):
        return abs(costs[0] - costs[1])

    def twoCitySchedCost(self, costs):
        """
        :type costs: List[List[int]]
        :rtype: int
        """
        
        costs = sorted(costs, reverse = True, key = self.compare)
        
        n = len(costs)/2
        a = 0
        b = 0
        cost = 0

        for item in costs:
            if (a == n or b == n):
                break

            if item[0] < item[1]:
                a+=1
                cost += item[0]
            else:
                b+=1 
                cost += item[1]
        
        if a < b:
            #add all a options
            for i in range(a+b, len(costs)):
                cost+=costs[i][0]

        else:
            #add all b options
            for i in range(a+b, len(costs)):
                cost+=costs[i][1]

        return cost
