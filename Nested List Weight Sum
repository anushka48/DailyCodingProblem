SOLUTION 0: Given a string
# Given a nested list of integers, return the sum of all integers in the list weighted by their depth.

from typing import List
def weightSum(nums: List) -> int:
    stack = [] #"[", 
    ret = 0 #2
    i = 0
    nums = str(nums).replace(" ", "")
    while i < len(nums):
        if nums[i] == "[":
            stack.append("[")
        elif nums[i] == "]":
            stack.pop()
        else:
            op = "" #2
            while nums[i] != "," and nums[i] != "]":
                op+=(nums[i])
                i+=1
            if (len(op) != 0):
                i-=1
                op = int(op)
                ret += op*len(stack)
        i+=1
    return ret
print(weightSum([1,[4,[6]]]))

# SOLUTION 2: Given int arrays + interface
# """
# This is the interface that allows for creating nested lists.
# You should not implement it, or speculate about its implementation
# """
class NestedInteger(object):
   def __init__(self, value=None):
       """
       If value is not specified, initializes an empty list.
       Otherwise initializes a single integer equal to value.
       """

   def isInteger(self):
       """
       @return True if this NestedInteger holds a single integer, rather than a nested list.
       :rtype bool
       """

   def add(self, elem):
       """
       Set this NestedInteger to hold a nested list and adds a nested integer elem to it.
       :rtype void
       """

   def setInteger(self, value):
       """
       Set this NestedInteger to hold a single integer equal to value.
       :rtype void
       """

   def getInteger(self):
       """
       @return the single integer that this NestedInteger holds, if it holds a single integer
       Return None if this NestedInteger holds a nested list
       :rtype int
       """

   def getList(self):
       """
       @return the nested list that this NestedInteger holds, if it holds a nested list
       Return None if this NestedInteger holds a single integer
       :rtype List[NestedInteger]
       """
def weightNestedList(nestList: NestedInteger) -> int:
    wSum = 0
    q = list()
    q.append(nestList)
    level = 1
    while(len(q)):
        cur = q.pop(0)
        if cur.isInteger():
            wSum += (cur.getInteger * level)
        else:
            q.extend(cur.getList())
        level += 1
        
    return wSum
# SOLUTION 3: Given integers and no interface
# Given a nested list of integers, return the sum of all integers in the list weighted by their depth.
# Each element is either an integer, or a list -- whose elements may also be integers or other lists.
from typing import List
def nestedListWeightSum(weights: List[List[int]]) -> int:
    level = 1
    wSum = 0
    q = weights
    while (len(q)):
        cur = q
        q = []
        for c in cur:
            if (type(c) == int):
                wSum += level * c
            else:
                q.extend(c)
        level += 1
    return wSum

print(nestedListWeightSum([-1,[-4,[-6]]]))




    
